#**
@author Marvin Kickuth
*#
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head>
    <meta charset="utf-8">
    <title>mthesis map</title>
    <link rel="shortcut icon" type="image/png" href="img/favicon.png"/>
    <!-- Stylesheets -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" />
    <link rel="stylesheet" type="text/css" href="css/map.css" />
</head>
<body>

<div class="sidenav">
    <form id="panelForm">
        <select id="algo" name="algo">
            <option value="sspe">SmartSPE</option>
            <option value="spe">SPE</option>
            <option value="ga">GA</option>
            <option value="sp">shortest path</option>
            ## <option value="ot">other</option>
        </select>
        <label for="algo">algorithm</label>
        <br><br>
        max distance: <br>
        <label id="max_dist_km">$solver.getMaxDistanceKM()</label> km<br>
        <input id="max_dist_factor" onchange="updateMaxDist()" type="number" step="0.01" min="1" style="width: 35%;" name="max_dist" value="$solver.getMaxDistanceFactor()">
        <label for="max_dist"> SP factor</label><br><br>
        <label>
            <input id="source" type="number" min="0" style="width: 35%;" name="source" value="$solver.getSource().getId()">
            Source ID
        </label>
        <label>
            <input id="sink" type="number" min="0" style="width: 35%;" name="sink" value="$solver.getTarget().getId()">
            Sink ID
        </label><br><br>
        <button class="button" id="submitButton"><span>Go!</span></button><br><br><br> ## TODO fix awful layout
    </form>

    <progress id="progressBar" value="0" max="100" style="width: 95%; margin: 0 auto;"></progress>

    <input type="checkbox" id="poiToggle" onchange="togglePois(this)"/><label for="poiToggle">Show POIs</label>
</div>

<div class="navbar">  ## TODO
    <a href="/" class="active">Map</a>
    <a href="https://github.com/kickuth/osm-route-finder" target="_blank" rel="noopener noreferrer">Source</a>
    ##<a href="https://www.google.com/search?q=cake">Cake?</a>
</div>

<div class="main" style="width: 100%; height: 95vh; top: 0; left: 0" id="map"></div>

<!-- Add the Leaflet JavaScript library and plugins -->
<script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
<script src="js/leaflet.uGeoJSON.js"></script>
<script src="js/leaflet.ellipse.js"></script>
<script src="js/leaflet.helper.js"></script>
## <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.AnimatedMarker/1.0.0/AnimatedMarker.js"></script>
<!-- Add jquery library and plugins -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.2.2/jquery.form.min.js"></script>

<script>
    // Create variable to hold map element, give initial settings to map
    const map = L.map('map',{ center: [51, 10], zoom: 7, preferCanvas: true});
    L.control.scale({imperial: false, maxWidth: 250}).addTo(map);

    // Various tile layers
    const cornerBottomRight = L.latLng(47.26543, 15.05078);
    const cornerTopLeft = L.latLng(55.14777, 5.864417);
    // light map
    const tileLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: 'OpenStreetMap',
        bounds: L.latLngBounds(cornerBottomRight, cornerTopLeft), opacity: 1 });
    // dark map
    // const tileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', { attribution: 'OpenStreetMap', opacity: 0.7 });
    // google map
    // const tileLayer = L.tileLayer('https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
    //     subdomains: ['mt0','mt1','mt2','mt3'],
    //     bounds: L.latLngBounds(cornerBottomRight, cornerTopLeft),
    //     opacity: 0.7 });

    tileLayer.addTo(map);

    // Path colours
    const colors = ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff', '#000', '#fff', '#f70'];
    let col_idx = 0;

    // local POIs (requested on demand)
    new L.UGeoJSONLayer({
        endpoint:"pois",
        enctype:"json",
        minzoom:13,
        renderer: L.canvas({ padding: 0.5 }),
        onEachFeature: function (feature, layer) {
            layer.bindPopup(poiPopup(feature));
        },
        pointToLayer: function (feature, latlon) {
            let name = feature.properties.name;
            // if (isCommonName(name)) {
            //     return getMarker(feature.properties.name, latlon)
            // } else {
            //     return null;
            // }
            return getMarker(name, latlon);
        }
    }).addTo(map);

    // global POIs
    const canvasRenderer = L.canvas({ padding: 0.5 });  ## renderer that draws everything onto a single canvas
    var poiLayer = L.geoJSON($poiGeoJSON, {
        renderer: canvasRenderer,
        onEachFeature: function (feature, layer) {
            layer.bindPopup(poiPopup(feature));
        },
        pointToLayer: function (feature, latlon) {
            let name = feature.properties.name;
            // hide most common features (which are only displayed dynamically close up))
            if (isCommonName(name)) {
                return null;
            } else {
                return getMarker(name, latlon);
            }
        }
    });

    // Toggle: Display/hide global POIs
    function togglePois(obj) {
        if (obj.checked) {
            map.addLayer(poiLayer);
        } else {
            map.removeLayer(poiLayer);
        }
    }

    // shortest path between source and target, i.e. allowed max dist ignoring factor.
    let baseMaxDist = $solver.getMaxDistance();

    // path style/colour
    const lineStyle = {
        "color": colors[col_idx],
        "weight": 5,
        "opacity": 0.75
    };

    // Define submit behaviour
    $('#panelForm').on('submit', function computePath() {
        document.getElementById("submitButton").disabled = true;
        // start querying and display progress status
        const progressUpdater = window.setInterval(function () {
            $.getJSON("status", function (res) {
                document.getElementById("progressBar").value = res.progress;
            });
        }, 1000);

        // send request and process result
        $('#panelForm').ajaxSubmit("path", null, "json", function (res) {
            // add result path
            L.geoJSON(res, {
                style: lineStyle,
                onEachFeature: function onEachFeature(feature, layer) { layer.once('click', function(e){ drawEllipse(feature, e) }); }
            }).bindPopup(pathPopup).addTo(map);
            // add small markers for POIs on path
            console.log(res.pathPois);
            L.geoJSON(JSON.parse(res.pathPois), {
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, {
                        radius: 4,
                        fillColor: "#fff",
                        color: "#000",
                        weight: 1,
                        opacity: 1,
                        fillOpacity: 0.7
                    });
                }
            }).addTo(map);
            // var animatedMarker = L.animatedMarker(line.getLatLngs(), {
            //     distance: 100, // meters
            //     interval: 50, // milliseconds
            // }).addTo(map);
            lineStyle.color = colors[++col_idx%colors.length];
            // update max distance
            baseMaxDist = parseInt(res.shortestpathdist);
            updateMaxDist();
            // stop updating and reset the progressbar
            window.clearInterval(progressUpdater);
            document.getElementById("progressBar").value = 0;
            document.getElementById("submitButton").disabled = false;
        });

        return false;  // do not reload page on submit
    });

    function updateMaxDist() {
        document.getElementById("max_dist_km").innerHTML = ((baseMaxDist * document.getElementById("max_dist_factor").value) | 0) / 1000;
    }
</script>
</body>
</html>
