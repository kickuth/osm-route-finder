#**
@author Marvin Kickuth
*#
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>mthesis map</title>
    <!-- External Stylesheets -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" />

    <style>
        html {
            min-height: 100%;
        }

        body {
            font-family: "Lato", sans-serif;
            color: #f1f1f1;
            background: -webkit-linear-gradient(#666666, #333333);
            background: -o-linear-gradient(#666666, #333333);
            background: -moz-linear-gradient(#666666, #333333);
            background: linear-gradient(#666666, #333333);
            background-color: #666666;
        }

        .sidenav {
            height: 100%;
            width: 160px;
            position: fixed;
            z-index: 1001;
            top: 0;
            right: 0;
            background-color: rgba(0,0,0, .7);
            overflow-x: hidden;
            padding-top: 20px;
        }

        .sidenav a {
            padding: 6px 8px 6px 16px;
            text-decoration: none;
            font-size: 25px;
            color: #a1a1a1;
            display: block;
        }

        .sidenav a:hover {
            color: #f1f1f1;
        }
        .button {
            background-color: #4CAF50; /* Green */
            border: none;
            border-radius: 12px;
            color: white;
            padding: 15px 32px;
            text-align: center;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.5s;
            position: absolute;
            margin: 5px;
            width: 90%;
        }
        .button span {
            cursor: pointer;
            display: inline-block;
            position: relative;
            transition: 0.5s;
        }
        .button span:after {
            content: '\00bb';
            position: absolute;
            opacity: 0;
            top: 0;
            right: -20px;
            transition: 0.5s;
        }
        .button:hover span {
            padding-right: 25px;
        }
        .button:hover span:after {
            opacity: 1;
            right: 0;
        }
    </style>

</head>
<body>

<div class="sidenav">
    <form action="" method="post">
        <input id="algo_sp" type="checkbox" name="algo_sp" value="shortest path"><label for="algo_sp">shortest path</label><br>
        <input id="algo_ng" type="checkbox" name="algo_ng" value="naive greedy"><label for="algo_ng">naive greedy</label><br>
        <input id="algo_ot" type="checkbox" name="algo_ot" value="other"><label for="algo_ot">other</label><br><br>
        <label>
            <input type="number" min="0" style="width: 30%;" name="source" value="1">
            Source ID
        </label>
        <label>
            <input type="number" min="0" style="width: 30%;" name="sink" value="1000">
            Sink ID
        </label><br><br>
        <button class="button" name="submit" value="submit"><span>Go!</span></button><br><br><br> ## TODO fix awful layout
    </form>

    <input type="checkbox" id="poiToggle" onchange="togglePois(this)" checked/><label for="poiToggle">Show POIs</label>
</div>

<div class="main" style="width: 100%; height: 95vh; top: 0; left: 0" id="map"></div>

<!-- Add the Leaflet JavaScript library -->
<script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>

<script>
    // Create variable to hold map element, give initial settings to map
    var map = L.map('map',{ center: [48, 9.5], zoom: 10});
    // Add OpenStreetMap tile layer to map
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', { attribution: 'OpenStreetMap', opacity: 0.7 }).addTo(map);


    var lineStyle = {
        "color": "#ff7800",
        "weight": 5,
        "opacity": 0.75
    };

    L.geoJSON($pathGeoJSON.toString(), {style: lineStyle}).addTo(map);



    // POIs
    ## TODO Colour depending on class
    var poiStyle = {
        radius: 6,
        fillColor: "#00cc55",
        color: "#000",
        weight: 1,
        opacity: 0.5,
        fillOpacity: 0.8
    };

    var canvasRenderer = L.canvas({ padding: 0.5 });  ## renderer that draws everything onto a single canvas

    var poiLayer = L.geoJSON($poiGeoJSON.toString(), {
        renderer: canvasRenderer,
        onEachFeature: function (feature, layer) {
            layer.bindPopup(feature.properties.name);
        },
        pointToLayer: function (feature, latlon) {
            return L.circleMarker(latlon, poiStyle);
        }
    }).addTo(map);

    // Toggle: Display/hide POIs
    function togglePois(obj) {
        if (obj.checked) {
            map.addLayer(poiLayer);
        } else {
            map.removeLayer(poiLayer);
        }
    }

</script>
</body>
</html>
